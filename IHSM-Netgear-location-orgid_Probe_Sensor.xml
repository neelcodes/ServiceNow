<?xml version="1.0" encoding="UTF-8"?>
<unload unload_date="2022-11-11 07:13:14">
<discovery_sensor action="INSERT_OR_UPDATE">
<active>true</active>
<agent/>
<apply_defaults>true</apply_defaults>
<classification_type/>
<coalesce/>
<condition_script/>
<data_option>insert_update</data_option>
<data_source display_value=""/>
<description/>
<external_names/>
<java_class/>
<major_version>1</major_version>
<minor_version>0</minor_version>
<name>IHSM-Netgear-location-orgid</name>
<order/>
<parent display_value=""/>
<reacts_to_probe display_value="IHSM-Netgear-Location-orgid">1afcd32e9798595019f2331e6253af86</reacts_to_probe>
<script><![CDATA[new DiscoverySensor({

	
	/*  This sensor uses the values of snmp location and contact 
		fetched during discovery by the probe and update the Location field of the CI 
		if the value matches value in cnm location. Where there is no match, clear the value of location 
		field on the CI. Also if the snmp_sys_location exists on the CI table, update the field else ignore
	*/
    process: function(result) {

        var locationResponse = new SNMPResponse(result);
        var ci = this.getCmdbRecord();
        var tbl = ci.sys_meta.name;
        var ClearValue = 'NULL';
        var grTbl = new GlideRecord(tbl);
        var snmpLocation = locationResponse.getOIDText('iso.org.dod.internet.mgmt.mib-2.system.sysLocation'); //  command to fetch snmp location
        var snmpContact = locationResponse.getOIDText('iso.org.dod.internet.mgmt.mib-2.system.sysContact'); //  command to fetch snmp contact

        if (JSUtil.notNil(snmpLocation)) {
            var locGr_value = this.getLocation(snmpLocation);
            if (JSUtil.notNil(locGr_value)) {
                current.location = locGr_value; // update location if cnm location matches snmp Location
            } else {
                current.location = ClearValue;  // clear Location if snmp location doesnt match cnm location
            }
            if (grTbl.isValidField("snmp_sys_location")) {
                current.snmp_sys_location = snmpLocation;  // update snmp location field if it exists
            }
        }
        if (JSUtil.notNil(snmpContact)) {
            var grOrg = new GlideRecord('u_organisation');
            if (grOrg.get('u_organisationid', snmpContact)) {
                current.u_organization_id = grOrg.sys_id + ""; //updates the org_id received from sysContact
            }
        }
    },

    getLocation: function(locationValue) {
        var grLocation = new GlideRecord("cmn_location");
        grLocation.addQuery("name", locationValue);
        grLocation.query();
        if (grLocation.next()) {
            return grLocation.sys_id; //returns the location value where there is a match
        }
        return "";
    },

    type: 'DiscoverySensor'

});]]></script>
<sensor_type>Javascript</sensor_type>
<sys_class_name>discovery_sensor</sys_class_name>
<sys_created_by>neelagantan.sankara</sys_created_by>
<sys_created_on>2022-07-04 09:46:38</sys_created_on>
<sys_customer_update>false</sys_customer_update>
<sys_id>1c2d69e81b2cd5100e203333cc4bcbba</sys_id>
<sys_mod_count>72</sys_mod_count>
<sys_name>IHSM-Netgear-location-orgid</sys_name>
<sys_package display_value="Global" source="global">global</sys_package>
<sys_policy/>
<sys_replace_on_upgrade>false</sys_replace_on_upgrade>
<sys_scope display_value="Global">global</sys_scope>
<sys_update_name>discovery_sensor_1c2d69e81b2cd5100e203333cc4bcbba</sys_update_name>
<sys_updated_by>neelagantan.sankara</sys_updated_by>
<sys_updated_on>2022-10-06 15:56:45</sys_updated_on>
<table/>
<type>data_source</type>
<xml_root_node/>
</discovery_sensor>
</unload>
